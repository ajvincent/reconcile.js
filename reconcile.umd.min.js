'use strict';Object.defineProperty(exports, '__esModule', {value:true});function mapElements(nodes){var map={};var tags={};var node;var indices=[];for(var i=0, len=nodes.length; i < len; i++) {node = nodes[i];var id=node.id?node.id:generateId(node, tags);map[id] = node;node._i = i;node._id = id;indices.push(i);}return {'map':map, 'indices':indices};}function generateId(node, tags){var tag=node.tagName?node.tagName:'x' + node.nodeType;if(!tags[tag]){tags[tag] = 0;}tags[tag]++;return tag + tags[tag];}function generateMoves(map, nodes, indices, base, reverse, index){var moves=[];var compare=[];var operateMap={};var tags={};for(var i=0, len=nodes.length; i < len; i++) {var node=nodes[reverse?nodes.length - i - 1:i], bound=base.childNodes[reverse?base.childNodes.length - indices[i] - 1:indices[i]], id=node.id?node.id:generateId(node, tags);if(operateMap[id]){continue;}var existing=map[id];if(existing){if(existing !== bound){var relativeBaseIndex=reverse?base.childNodes.length - existing._i - 1:existing._i;moves.push({'action':'moveChildElement', 'element':existing, 'baseIndex':index + '>' + relativeBaseIndex, 'sourceIndex':index + '>' + i});indices.splice(i, 0, indices.splice(relativeBaseIndex, 1)[0]);}if(!node.isEqualNode(existing)){compare.push([node, existing]);}}else {var inserted=node.cloneNode(true);var relativeBaseIndex=reverse?nodes.length - i - 1:i;moves.push({'action':'insertChildElement', 'element':inserted, 'baseIndex':index + '>' + relativeBaseIndex, 'sourceIndex':index + '>' + relativeBaseIndex});}operateMap[id] = true;}for(var i=0, len=base.childNodes.length; i < len; i++) {var remove=base.childNodes[i];var removeId=remove._id;if(!operateMap[removeId]){moves.push({'action':'removeChildElement', 'element':remove, 'baseIndex':index + '>' + remove._i, 'sourceIndex':null});}}return {'compare':compare, 'diff':moves};};function diff(source, base, index){var diffActions=[];if(index == null){index = '0';}if(source.nodeType === base.nodeType && (source.nodeType === 3 || source.nodeType === 8)){if(base.nodeValue !== source.nodeValue){diffActions.push({'action':'replaceText', 'element':base, 'baseIndex':index, 'sourceIndex':index, '_deleted':base.nodeValue, '_inserted':source.nodeValue});}return diffActions;}if(source.attributes && base.attributes){var attributes=source.attributes, value, name;for(var i=attributes.length; i--;) {value = attributes[i].nodeValue;name = attributes[i].nodeName;var val=base.getAttribute(name);if(val !== value){if(val == null){diffActions.push({'action':'setAttribute', 'name':name, 'element':base, 'baseIndex':index, 'sourceIndex':index, '_inserted':value});}else {diffActions.push({'action':'setAttribute', 'name':name, 'element':base, 'baseIndex':index, 'sourceIndex':index, '_deleted':val, '_inserted':value});}}}attributes = base.attributes;for(var i=attributes.length; i--;) {name = attributes[i].nodeName;if(source.getAttribute(name) === null){diffActions.push({'action':'removeAttribute', 'name':name, 'baseIndex':index, 'sourceIndex':index, '_deleted':attributes[i].nodeValue});}}}var compare=[];if(source.childNodes && base.childNodes){var mapResult=mapElements(base.childNodes), nodes=source.childNodes;var map=mapResult['map'];var indices=mapResult['indices'];var moves=generateMoves(map, nodes, indices.slice(0), base, false, index);if(moves['diff'].length > 1){var backwardMoves=generateMoves(map, nodes, indices.slice(0), base, true, index);if(backwardMoves['diff'].length < moves['diff'].length){moves = backwardMoves;}}diffActions = diffActions.concat(moves['diff']);compare = moves['compare'];}if(compare.length > 0){for(var i=0, len=compare.length; i < len; i++) {var sourceChildNode=compare[i][0];var baseChildNode=compare[i][1];var childDiffs=diff(sourceChildNode, baseChildNode, index + '>' + baseChildNode._i);if(childDiffs.length > 0){diffActions = diffActions.concat(childDiffs);}delete baseChildNode._i;delete baseChildNode._id;}}return diffActions;}function isEqualChange(change1, change2){return change1['baseIndex'] === change2['baseIndex'] && change1['sourceIndex'] === change2['sourceIndex'] && change1['action'] === change2['action'] && change1['name'] === change2['name'] && change1['_deleted'] === change2['_deleted'] && change1['_inserted'] === change2['_inserted'] && change1['element'].isEqualNode(change2['element']);}function isParentChange(changeChild, changeParent){return changeChild['baseIndex'].indexOf(changeParent['baseIndex']) === 0 && changeChild['baseIndex'] !== changeParent['baseIndex'];};function patch(theirs, mine){var conflicts=[];var changes=[];var theirChanges=theirs.slice(0);var myChanges=mine.slice(0);for(var i=0, len=theirChanges.length; i < len; i++) {var theirItem=theirChanges[i];var myItem, m=0, myLength=myChanges.length;for(; m < myLength; m++) {myItem = myChanges[m];var conflicted=false;if(theirItem['baseIndex'] === myItem['baseIndex']){if(isEqualChange(theirItem, myItem)){changes.push(myItem);break;}else {conflicted = true;}}else {var isTheirsRemove=theirItem['action'] === 'removeChildElement';var isMineRemove=myItem['action'] === 'removeChildElement';conflicted = isParentChange(theirItem, myItem) && isMineRemove && !isTheirsRemove || isParentChange(myItem, theirItem) && !isMineRemove && isTheirsRemove;}if(conflicted){theirItem['_conflict'] = true;theirItem['_owner'] = 'theirs';theirItem['_conflictedWith'] = myItem;myItem['_conflict'] = true;myItem['_owner'] = 'mine';myItem['_conflictedWith'] = theirItem;conflicts.push(theirItem);conflicts.push(myItem);break;}myItem = null;}if(!myItem){changes.push(theirItem);}else {myChanges.splice(m, 1);}}if(myChanges.length > 0){changes = changes.concat(myChanges);}if(conflicts.length > 0){changes = changes.concat(conflicts);}changes.sort(sortChange);return changes;}function sortChange(a, b){if(a['sourceIndex'] === b['sourceIndex']){return 0;}else if(!a['sourceIndex'] && b['sourceIndex']){return -1;}else if(a['sourceIndex'] && !b['sourceIndex']){return 1;}var aIndices=a['sourceIndex'].split('>');var bIndices=b['sourceIndex'].split('>');var equal=true;var i=0;while(equal && i < aIndices.length && i < bIndices.length) {var aN=parseInt(aIndices[i], 10);var bN=parseInt(bIndices[i], 10);if(aN === bN){i++;continue;}else if(isNaN(aN) || isNaN(bN)){return isNaN(aN)?1:-1;}else {return aN > bN?1:-1;}}return 0;}var findChildAtIndex=function findChildAtIndex(node, index){if(!index || !node.childNodes || node.childNodes.length === 0){return null;}var result={};var indices=index.split('>');var found=true;var lastParentIndex='';for(var i=1, len=indices.length; i < len; i++) {var nodeIndex=parseInt(indices[i], 10);if(node.childNodes && node.childNodes.length > nodeIndex){node = node.childNodes[nodeIndex];}else {lastParentIndex = indices.slice(0, i - 1).join('>');found = false;break;}}result['lastParent'] = found?node.parentNode:node;result['lastParentIndex'] = found?index.slice(0, index.lastIndexOf('>')):lastParentIndex;result['node'] = found?node:null;result['found'] = found;return result;};function resolve(conflict, base, owner){if(conflict[owner]){return apply([conflict[owner]], base, true);}return null;};function apply(changes, base, force){var unapplied=[];var moves=[];var removals=[];var conflictChanges=[];for(var c=0, cLen=changes.length; c < cLen; c++) {var change=changes[c];var action=change['action'];var baseIndex=change['baseIndex'];var sourceIndex=change['sourceIndex'];var baseReference=change['_baseReference'];var sourceReference=change['_sourceReference'];if(change['_conflict'] && !force){change['_baseReference'] = findChildAtIndex(base, baseIndex);if(sourceIndex && baseIndex !== sourceIndex){change['_sourceReference'] = findChildAtIndex(base, sourceIndex);}conflictChanges.push(change);continue;}var node=null;var findBaseChildResult=baseReference;if(findBaseChildResult == null){findBaseChildResult = findChildAtIndex(base, baseIndex);if(findBaseChildResult == null){unapplied.push(change);continue;}}var node=findBaseChildResult['node'];if(!findBaseChildResult['found']){if(action === 'insertChildElement'){var lastParent=findBaseChildResult['lastParent'];moves.push([lastParent, change['element'], null, change]);}else {unapplied.push(change);}continue;}if(node === null){continue;}if(action === 'moveChildElement' || action === 'insertChildElement'){var sourceNode=node;if(sourceIndex !== baseIndex){var findSourceChildResult=sourceReference;if(findSourceChildResult == null){findSourceChildResult = findChildAtIndex(base, sourceIndex);}sourceNode = findSourceChildResult !== null?findSourceChildResult['node']:null;}if(action === 'moveChildElement'){moves.push([node.parentNode, node, sourceNode, change]);}else {moves.push([node.parentNode, change['element'], sourceNode, change]);}}else if(action === 'removeChildElement'){removals.push([node.parentNode, node]);}else if(action === 'replaceText'){node.nodeValue = change['_inserted'];}else if(action === 'setAttribute'){node.setAttribute(change['name'], change['_inserted']);}else if(action === 'removeAttribute'){node.removeAttribute(change['name']);}}moves.sort(function(a, b){return sortChange(a[3], b[3]);});for(var i=0, len=moves.length; i < len; i++) {var move=moves[i];var parent=move[0], insertion=move[1], source=move[2], change=move[3];if(source === null && force){var sourceIndex=change['sourceIndex'];if(sourceIndex){var lastIndexStr=sourceIndex.substr(sourceIndex.lastIndexOf('>') + 1, sourceIndex.length);var childIndex=parseInt(lastIndexStr, 10);if(parent.childNodes && parent.childNodes.length > childIndex){source = parent.childNodes[childIndex];}}}parent.insertBefore(insertion, source);}for(var i=0; i < removals.length; i++) {var removal=removals[i];removal[0].removeChild(removal[1]);}var conflicts=[];while(conflictChanges.length > 0) {var change=conflictChanges.pop();var conflict={};conflict[change['_owner']] = change;if(change['_conflictedWith']){var conflictedWithChange=change['_conflictedWith'];if(conflictedWithChange){var i=conflictChanges.indexOf(conflictedWithChange);if(i > -1){conflictChanges.splice(i, 1);conflict[conflictedWithChange['_owner']] = conflictedWithChange;}delete change['_conflictedWith'];delete conflictedWithChange['_conflictedWith'];}}conflicts.push(conflict);}return {'unapplied':unapplied, 'conflicts':conflicts};}exports.diff = diff;exports.patch = patch;exports.apply = apply;exports.resolve = resolve;exports.isEqualChange = isEqualChange;exports.isParentChange = isParentChange;exports.sortChange = sortChange;

